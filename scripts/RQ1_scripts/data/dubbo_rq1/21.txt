{"randomdocline":"@param allowMultiFile if <code>false<\/code>, throw {@link IllegalStateException} when found multi file on the class path.","signature":"public static Properties loadProperties(String fileName, boolean allowMultiFile, boolean optional)","doc":"Load properties file to {@link Properties} from class path.\r\n\r\n@param fileName properties file name. for example: <code>dubbo.properties<\/code>, <code>METE-INF\/conf\/foo.properties<\/code>\r\n@param allowMultiFile if <code>false<\/code>, throw {@link IllegalStateException} when found multi file on the class path.\r\n@param optional is optional. if <code>false<\/code>, log warn when properties config file not found!s\r\n@return loaded {@link Properties} content. <ul>\r\n<li>return empty Properties if no file found.\r\n<li>merge multi properties file if found multi file\r\n<\/ul>\r\n@throws IllegalStateException not allow multi-file, but multi-file exist on class path.\r\n","source":"{\r\n    Properties properties = new Properties();\r\n    \/\/ add scene judgement in windows environment Fix 2557\r\n    if (checkFileNameExist(fileName)) {\r\n        try {\r\n            FileInputStream input = new FileInputStream(fileName);\r\n            try {\r\n                properties.load(input);\r\n            } finally {\r\n                input.close();\r\n            }\r\n        } catch (Throwable e) {\r\n            logger.warn(\"Failed to load \" + fileName + \" file from \" + fileName + \"(ignore this file): \" + e.getMessage(), e);\r\n        }\r\n        return properties;\r\n    }\r\n    List<java.net.URL> list = new ArrayList<java.net.URL>();\r\n    try {\r\n        Enumeration<java.net.URL> urls = ClassUtils.getClassLoader().getResources(fileName);\r\n        list = new ArrayList<java.net.URL>();\r\n        while (urls.hasMoreElements()) {\r\n            list.add(urls.nextElement());\r\n        }\r\n    } catch (Throwable t) {\r\n        logger.warn(\"Fail to load \" + fileName + \" file: \" + t.getMessage(), t);\r\n    }\r\n    if (list.isEmpty()) {\r\n        if (!optional) {\r\n            logger.warn(\"No \" + fileName + \" found on the class path.\");\r\n        }\r\n        return properties;\r\n    }\r\n    if (!allowMultiFile) {\r\n        if (list.size() > 1) {\r\n            String errMsg = String.format(\"only 1 %s file is expected, but %d dubbo.properties files found on class path: %s\", fileName, list.size(), list.toString());\r\n            logger.warn(errMsg);\r\n        }\r\n        \/\/ fall back to use method getResourceAsStream\r\n        try {\r\n            properties.load(ClassUtils.getClassLoader().getResourceAsStream(fileName));\r\n        } catch (Throwable e) {\r\n            logger.warn(\"Failed to load \" + fileName + \" file from \" + fileName + \"(ignore this file): \" + e.getMessage(), e);\r\n        }\r\n        return properties;\r\n    }\r\n    logger.info(\"load \" + fileName + \" properties file from \" + list);\r\n    for (java.net.URL url : list) {\r\n        try {\r\n            Properties p = new Properties();\r\n            InputStream input = url.openStream();\r\n            if (input != null) {\r\n                try {\r\n                    p.load(input);\r\n                    properties.putAll(p);\r\n                } finally {\r\n                    try {\r\n                        input.close();\r\n                    } catch (Throwable t) {\r\n                    }\r\n                }\r\n            }\r\n        } catch (Throwable e) {\r\n            logger.warn(\"Fail to load \" + fileName + \" file from \" + url + \"(ignore this file): \" + e.getMessage(), e);\r\n        }\r\n    }\r\n    return properties;\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\dubbo\\dubbo-common\/src\/main\/java\/org\/apache\/dubbo\/common\/utils\/ConfigUtils.java"}
'e92a55364'
'ca5abd015'