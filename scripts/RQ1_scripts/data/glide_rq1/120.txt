{"randomdocline":"Encoder} that is registered first will be used.","signature":"public Registry register(@NonNull Class<Data> dataClass, @NonNull Encoder<Data> encoder)","doc":"Registers the given {@link Encoder} for the given data class (InputStream, FileDescriptor etc).\r\n\r\n<p>The {@link Encoder} will be used both for the exact data class and any subtypes. For\r\nexample, registering an {@link Encoder} for {@link java.io.InputStream} will result in the\r\n{@link Encoder} being used for {@link\r\nandroid.content.res.AssetFileDescriptor.AutoCloseInputStream}, {@link java.io.FileInputStream}\r\nand any other subclass.\r\n\r\n<p>If multiple {@link Encoder}s are registered for the same type or super type, the {@link\r\nEncoder} that is registered first will be used.\r\n\r\n@deprecated Use the equivalent {@link #append(Class, Class, ModelLoaderFactory)} method\r\n    instead.\r\n","source":"{\r\n    return append(dataClass, encoder);\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\glide\\library\/src\/main\/java\/com\/bumptech\/glide\/Registry.java"}
'8a149b939'
'03f5bd409'
'6d166ad38'