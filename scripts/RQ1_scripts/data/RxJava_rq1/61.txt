{"randomdocline":"@param sources the array of sources. A subscription to each source will","signature":"public static Maybe<T> ambArray(@NonNull MaybeSource<? extends T>... sources)","doc":"Runs multiple {@link MaybeSource}s and signals the events of the first one that signals (disposing\r\nthe rest).\r\n<p>\r\n<img width=\"640\" height=\"519\" src=\"https:\/\/raw.github.com\/wiki\/ReactiveX\/RxJava\/images\/rx-operators\/Maybe.ambArray.png\" alt=\"\">\r\n<dl>\r\n<dt><b>Scheduler:<\/b><\/dt>\r\n<dd>{@code ambArray} does not operate by default on a particular {@link Scheduler}.<\/dd>\r\n<\/dl>\r\n\r\n@param <T> the value type\r\n@param sources the array of sources. A subscription to each source will\r\n           occur in the same order as in the array.\r\n@return the new {@code Maybe} instance\r\n@throws NullPointerException if {@code sources} is {@code null}\r\n","source":"{\r\n    Objects.requireNonNull(sources, \"sources is null\");\r\n    if (sources.length == 0) {\r\n        return empty();\r\n    }\r\n    if (sources.length == 1) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        MaybeSource<T> source = (MaybeSource<T>) sources[0];\r\n        return wrap(source);\r\n    }\r\n    return RxJavaPlugins.onAssembly(new MaybeAmb<>(sources, null));\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\RxJava\\src\/main\/java\/io\/reactivex\/rxjava3\/core\/Maybe.java"}
'a1693ecc9'
'0b51d41bc'