{"randomdocline":"Make sure that a request using a deterministic script gets cached and nondeterministic scripts do not get cached.","signature":"public void testScriptCaching() throws Exception","doc":"Make sure that a request using a deterministic script gets cached and nondeterministic scripts do not get cached.\r\n","source":"{\r\n    Script mapScript = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, \"state['count'] = 1\", Collections.emptyMap());\r\n    Script combineScript = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, \"no-op aggregation\", Collections.emptyMap());\r\n    Script reduceScript = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, \"no-op list aggregation\", Collections.emptyMap());\r\n    Script ndInitScript = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, \"state.data = Math.random()\", Collections.emptyMap());\r\n    Script ndMapScript = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, \"state['count'] = Math.random() >= 0.5 ? 1 : 0\", Collections.emptyMap());\r\n    Script ndRandom = new Script(ScriptType.INLINE, CustomScriptPlugin.NAME, \"return Math.random()\", Collections.emptyMap());\r\n    assertAcked(prepareCreate(\"cache_test_idx\").setMapping(\"d\", \"type=long\").setSettings(Settings.builder().put(\"requests.cache.enable\", true).put(\"number_of_shards\", 1).put(\"number_of_replicas\", 1)).get());\r\n    indexRandom(true, client().prepareIndex(\"cache_test_idx\").setId(\"1\").setSource(\"s\", 1), client().prepareIndex(\"cache_test_idx\").setId(\"2\").setSource(\"s\", 2));\r\n    \/\/ Make sure we are starting with a clear cache\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L));\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L));\r\n    \/\/ Test that a non-deterministic init script causes the result to not be cached\r\n    SearchResponse r = client().prepareSearch(\"cache_test_idx\").setSize(0).addAggregation(scriptedMetric(\"foo\").initScript(ndInitScript).mapScript(mapScript).combineScript(combineScript).reduceScript(reduceScript)).get();\r\n    assertSearchResponse(r);\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L));\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L));\r\n    \/\/ Test that a non-deterministic map script causes the result to not be cached\r\n    r = client().prepareSearch(\"cache_test_idx\").setSize(0).addAggregation(scriptedMetric(\"foo\").mapScript(ndMapScript).combineScript(combineScript).reduceScript(reduceScript)).get();\r\n    assertSearchResponse(r);\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L));\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L));\r\n    \/\/ Test that a non-deterministic combine script causes the result to not be cached\r\n    r = client().prepareSearch(\"cache_test_idx\").setSize(0).addAggregation(scriptedMetric(\"foo\").mapScript(mapScript).combineScript(ndRandom).reduceScript(reduceScript)).get();\r\n    assertSearchResponse(r);\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L));\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(0L));\r\n    \/\/ NOTE: random reduce scripts don't hit the query shard context (they are done on the coordinator) and so can be cached.\r\n    r = client().prepareSearch(\"cache_test_idx\").setSize(0).addAggregation(scriptedMetric(\"foo\").mapScript(mapScript).combineScript(combineScript).reduceScript(ndRandom)).get();\r\n    assertSearchResponse(r);\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L));\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(1L));\r\n    \/\/ Test that all deterministic scripts cause the request to be cached\r\n    r = client().prepareSearch(\"cache_test_idx\").setSize(0).addAggregation(scriptedMetric(\"foo\").mapScript(mapScript).combineScript(combineScript).reduceScript(reduceScript)).get();\r\n    assertSearchResponse(r);\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getHitCount(), equalTo(0L));\r\n    assertThat(client().admin().indices().prepareStats(\"cache_test_idx\").setRequestCache(true).get().getTotal().getRequestCache().getMissCount(), equalTo(2L));\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\elasticsearch\\server\/src\/internalClusterTest\/java\/org\/elasticsearch\/search\/aggregations\/metrics\/ScriptedMetricIT.java"}