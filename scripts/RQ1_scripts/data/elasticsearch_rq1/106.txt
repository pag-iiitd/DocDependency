{"randomdocline":"Recovers a shard from it's local file system store. This method required pre-knowledge about if the shard should","signature":" void recoverFromStore(final IndexShard indexShard, ActionListener<Boolean> listener)","doc":"Recovers a shard from it's local file system store. This method required pre-knowledge about if the shard should\r\nexist on disk ie. has been previously allocated or if the shard is a brand new allocation without pre-existing index\r\nfiles \/ transaction logs. This\r\n\r\n@param indexShard the index shard instance to recovery the shard into\r\n@param listener resolves to <code>true<\/code> if the shard has been recovered successfully, <code>false<\/code> if the recovery\r\n                has been ignored due to a concurrent modification of if the clusters state has changed due to async updates.\r\n@see Store\r\n","source":"{\r\n    if (canRecover(indexShard)) {\r\n        RecoverySource.Type recoveryType = indexShard.recoveryState().getRecoverySource().getType();\r\n        assert recoveryType == RecoverySource.Type.EMPTY_STORE || recoveryType == RecoverySource.Type.EXISTING_STORE : \"expected store recovery type but was: \" + recoveryType;\r\n        ActionListener.completeWith(recoveryListener(indexShard, listener), () -> {\r\n            logger.debug(\"starting recovery from store ...\");\r\n            internalRecoverFromStore(indexShard);\r\n            return true;\r\n        });\r\n    } else {\r\n        listener.onResponse(false);\r\n    }\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\elasticsearch\\server\/src\/main\/java\/org\/elasticsearch\/index\/shard\/StoreRecovery.java"}