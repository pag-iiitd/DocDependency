{"randomdocline":"Visits the given types. Null types are ignored. This allows subclasses to call {@code","signature":"public final void visit(Type... types)","doc":"Visits the given types. Null types are ignored. This allows subclasses to call {@code\r\nvisit(parameterizedType.getOwnerType())} safely without having to check nulls.\r\n","source":"{\r\n    for (Type type : types) {\r\n        if (type == null || !visited.add(type)) {\r\n            \/\/ null owner type, or already visited;\r\n            continue;\r\n        }\r\n        boolean succeeded = false;\r\n        try {\r\n            if (type instanceof TypeVariable) {\r\n                visitTypeVariable((TypeVariable<?>) type);\r\n            } else if (type instanceof WildcardType) {\r\n                visitWildcardType((WildcardType) type);\r\n            } else if (type instanceof ParameterizedType) {\r\n                visitParameterizedType((ParameterizedType) type);\r\n            } else if (type instanceof Class) {\r\n                visitClass((Class<?>) type);\r\n            } else if (type instanceof GenericArrayType) {\r\n                visitGenericArrayType((GenericArrayType) type);\r\n            } else {\r\n                throw new AssertionError(\"Unknown type: \" + type);\r\n            }\r\n            succeeded = true;\r\n        } finally {\r\n            if (!succeeded) {\r\n                \/\/ When the visitation failed, we don't want to ignore the second.\r\n                visited.remove(type);\r\n            }\r\n        }\r\n    }\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\guava\\android\/guava\/src\/com\/google\/common\/reflect\/TypeVisitor.java"}
'fd919e54a5'