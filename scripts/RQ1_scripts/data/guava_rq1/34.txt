{"randomdocline":"@throws IOException if an I\/O error occurs","signature":"public String readLine() throws IOException","doc":"Reads a line of text. A line is considered to be terminated by any one of a line feed ({@code\r\n'\\n'}), a carriage return ({@code '\\r'}), or a carriage return followed immediately by a\r\nlinefeed ({@code \"\\r\\n\"}).\r\n\r\n@return a {@code String} containing the contents of the line, not including any\r\n    line-termination characters, or {@code null} if the end of the stream has been reached.\r\n@throws IOException if an I\/O error occurs\r\n","source":"{\r\n    while (lines.peek() == null) {\r\n        cbuf.clear();\r\n        \/\/ The default implementation of Reader#read(CharBuffer) allocates a\r\n        \/\/ temporary char[], so we call Reader#read(char[], int, int) instead.\r\n        int read = (reader != null) ? reader.read(buf, 0, buf.length) : readable.read(cbuf);\r\n        if (read == -1) {\r\n            lineBuf.finish();\r\n            break;\r\n        }\r\n        lineBuf.add(buf, 0, read);\r\n    }\r\n    return lines.poll();\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\guava\\android\/guava\/src\/com\/google\/common\/io\/LineReader.java"}
'a2c7f54378'
'9b94fb3965'
'd881d014cd'
'ad998b11bd'
'c7769b29de'
'3aadd26e9e'
'5a4d9bc5cd'
'73e382fa87'
'e72e09f851'
'1c285fc8d2'
'4f37c83bb0'
'c400582fee'
'1740aac1ba'
'43a8a98499'
'2459638f76'
'c61612cdab'
'1d10d27327'
'30dccfb7e9'
'6fcf6088fd'
'ecfd36e048'
'509fe0a4e7'
'7ce09488d1'
'bbab2ce3c1'
'dc5915eb10'