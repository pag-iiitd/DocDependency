{"randomdocline":"ImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link","signature":"public static ArrayList<E> newArrayList(Iterable<? extends E> elements)","doc":"Creates a <i>mutable<\/i> {@code ArrayList} instance containing the given elements; a very thin\r\nshortcut for creating an empty list then calling {@link Iterables#addAll}.\r\n\r\n<p><b>Note:<\/b> if mutability is not required and the elements are non-null, use {@link\r\nImmutableList#copyOf(Iterable)} instead. (Or, change {@code elements} to be a {@link\r\nFluentIterable} and call {@code elements.toList()}.)\r\n\r\n<p><b>Note for Java 7 and later:<\/b> if {@code elements} is a {@link Collection}, you don't\r\nneed this method. Use the {@code ArrayList} {@linkplain ArrayList#ArrayList(Collection)\r\nconstructor} directly, taking advantage of the new <a href=\"http:\/\/goo.gl\/iz2Wi\">\"diamond\"\r\nsyntax<\/a>.\r\n","source":"{\r\n    \/\/ for GWT\r\n    checkNotNull(elements);\r\n    \/\/ Let ArrayList's sizing logic work, if possible\r\n    return (elements instanceof Collection) ? new ArrayList<>(Collections2.cast(elements)) : newArrayList(elements.iterator());\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\guava\\guava\/src\/com\/google\/common\/collect\/Lists.java"}
'fd919e54a5'