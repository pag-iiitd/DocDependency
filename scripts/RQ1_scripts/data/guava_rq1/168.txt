{"randomdocline":"logged.","signature":" void addListener(Runnable listener, Executor executor)","doc":"Registers a listener to be {@linkplain Executor#execute(Runnable) run} on the given executor.\r\nThe listener will run when the {@code Future}'s computation is {@linkplain Future#isDone()\r\ncomplete} or, if the computation is already complete, immediately.\r\n\r\n<p>There is no guaranteed ordering of execution of listeners, but any listener added through\r\nthis method is guaranteed to be called once the computation is complete.\r\n\r\n<p>Exceptions thrown by a listener will be propagated up to the executor. Any exception thrown\r\nduring {@code Executor.execute} (e.g., a {@code RejectedExecutionException} or an exception\r\nthrown by {@linkplain MoreExecutors#directExecutor direct execution}) will be caught and\r\nlogged.\r\n\r\n<p>Note: For fast, lightweight listeners that would be safe to execute in any thread, consider\r\n{@link MoreExecutors#directExecutor}. Otherwise, avoid it. Heavyweight {@code directExecutor}\r\nlisteners can cause problems, and these problems can be difficult to reproduce because they\r\ndepend on timing. For example:\r\n\r\n<ul>\r\n  <li>The listener may be executed by the caller of {@code addListener}. That caller may be a\r\n      UI thread or other latency-sensitive thread. This can harm UI responsiveness.\r\n  <li>The listener may be executed by the thread that completes this {@code Future}. That\r\n      thread may be an internal system thread such as an RPC network thread. Blocking that\r\n      thread may stall progress of the whole system. It may even cause a deadlock.\r\n  <li>The listener may delay other listeners, even listeners that are not themselves {@code\r\n      directExecutor} listeners.\r\n<\/ul>\r\n\r\n<p>This is the most general listener interface. For common operations performed using\r\nlisteners, see {@link Futures}. For a simplified but general listener interface, see {@link\r\nFutures#addCallback addCallback()}.\r\n\r\n<p>Memory consistency effects: Actions in a thread prior to adding a listener <a\r\nhref=\"https:\/\/docs.oracle.com\/javase\/specs\/jls\/se7\/html\/jls-17.html#jls-17.4.5\">\r\n<i>happen-before<\/i><\/a> its execution begins, perhaps in another thread.\r\n\r\n<p>Guava implementations of {@code ListenableFuture} promptly release references to listeners\r\nafter executing them.\r\n\r\n@param listener the listener to run when the computation is complete\r\n@param executor the executor to run the listener in\r\n@throws RejectedExecutionException if we tried to execute the listener immediately but the\r\n    executor rejected it.\r\n","source":"","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\guava\\guava\/src\/com\/google\/common\/util\/concurrent\/ListenableFuture.java"}
'bbc26e180b'
'b62d52926b'
'9b94fb3965'
'63360f3f58'
'1f2b8775c6'
'2cf98c0fd9'
'516a02f67b'
'207dcb8706'
'e6888aadc4'
'0aa888b199'
'efa4d2b385'
'208def9719'
'dd05d2a900'
'3d812f0b4d'
'c5145ffbf0'