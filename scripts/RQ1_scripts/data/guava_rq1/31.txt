{"randomdocline":"    does nothing","signature":"public static void close(@NullableDecl Closeable closeable, boolean swallowIOException) throws IOException","doc":"Closes a {@link Closeable}, with control over whether an {@code IOException} may be thrown.\r\nThis is primarily useful in a finally block, where a thrown exception needs to be logged but\r\nnot propagated (otherwise the original exception will be lost).\r\n\r\n<p>If {@code swallowIOException} is true then we never throw {@code IOException} but merely log\r\nit.\r\n\r\n<p>Example:\r\n\r\n<pre>{@code\r\npublic void useStreamNicely() throws IOException {\r\n  SomeStream stream = new SomeStream(\"foo\");\r\n  boolean threw = true;\r\n  try {\r\n    \/\/ ... code which does something with the stream ...\r\n    threw = false;\r\n  } finally {\r\n    \/\/ If an exception occurs, rethrow it only if threw==false:\r\n    Closeables.close(stream, threw);\r\n  }\r\n}\r\n}<\/pre>\r\n\r\n@param closeable the {@code Closeable} object to be closed, or null, in which case this method\r\n    does nothing\r\n@param swallowIOException if true, don't propagate IO exceptions thrown by the {@code close}\r\n    methods\r\n@throws IOException if {@code swallowIOException} is false and {@code close} throws an {@code\r\n    IOException}.\r\n","source":"{\r\n    if (closeable == null) {\r\n        return;\r\n    }\r\n    try {\r\n        closeable.close();\r\n    } catch (IOException e) {\r\n        if (swallowIOException) {\r\n            logger.log(Level.WARNING, \"IOException thrown while closing Closeable.\", e);\r\n        } else {\r\n            throw e;\r\n        }\r\n    }\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\guava\\android\/guava\/src\/com\/google\/common\/io\/Closeables.java"}
'9b94fb3965'
'f6f3aab860'
'b05363dc42'
'af568193e6'