{"randomdocline":"Returns true if {@code graph} has at least one cycle. A cycle is defined as a non-empty subset","signature":"public static boolean hasCycle(Graph<N> graph)","doc":"Returns true if {@code graph} has at least one cycle. A cycle is defined as a non-empty subset\r\nof edges in a graph arranged to form a path (a sequence of adjacent outgoing edges) starting\r\nand ending with the same node.\r\n\r\n<p>This method will detect any non-empty cycle, including self-loops (a cycle of length 1).\r\n","source":"{\r\n    int numEdges = graph.edges().size();\r\n    if (numEdges == 0) {\r\n        \/\/ An edge-free graph is acyclic by definition.\r\n        return false;\r\n    }\r\n    if (!graph.isDirected() && numEdges >= graph.nodes().size()) {\r\n        \/\/ Optimization for the undirected case: at least one cycle must exist.\r\n        return true;\r\n    }\r\n    Map<Object, NodeVisitState> visitedNodes = Maps.newHashMapWithExpectedSize(graph.nodes().size());\r\n    for (N node : graph.nodes()) {\r\n        if (subgraphHasCycle(graph, visitedNodes, node, null)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\guava\\android\/guava\/src\/com\/google\/common\/graph\/Graphs.java"}
'9b94fb3965'
'c91323f873'