{"randomdocline":"information on whether the method is a {@code suspend fun}.","signature":"private static ServiceMethodAdapterInfo parseServiceMethodAdapterInfo(Method method)","doc":"Computes the adapter type of the method for lookup via {@link Retrofit#callAdapter} as well as\r\ninformation on whether the method is a {@code suspend fun}.\r\n\r\n<p>In the case of a Kotlin {@code suspend fun}, the last parameter type is a {@code\r\nContinuation} whose parameter carries the actual response type. In this case, we return {@code\r\nCall<T>} where {@code T} is the body type.\r\n","source":"{\r\n    Type[] genericParameterTypes = method.getGenericParameterTypes();\r\n    if (genericParameterTypes.length != 0) {\r\n        Type lastParameterType = genericParameterTypes[genericParameterTypes.length - 1];\r\n        if (lastParameterType instanceof ParameterizedType) {\r\n            ParameterizedType parameterizedLastParameterType = (ParameterizedType) lastParameterType;\r\n            try {\r\n                if (parameterizedLastParameterType.getRawType() == Continuation.class) {\r\n                    Type resultType = parameterizedLastParameterType.getActualTypeArguments()[0];\r\n                    if (resultType instanceof WildcardType) {\r\n                        resultType = ((WildcardType) resultType).getLowerBounds()[0];\r\n                    }\r\n                    if (resultType instanceof ParameterizedType) {\r\n                        ParameterizedType parameterizedResultType = (ParameterizedType) resultType;\r\n                        if (parameterizedResultType.getRawType() == Response.class) {\r\n                            Type bodyType = parameterizedResultType.getActualTypeArguments()[0];\r\n                            Type callType = new CallParameterizedTypeImpl(bodyType);\r\n                            return new ServiceMethodAdapterInfo(true, true, callType);\r\n                        }\r\n                    }\r\n                    Type callType = new CallParameterizedTypeImpl(resultType);\r\n                    return new ServiceMethodAdapterInfo(true, false, callType);\r\n                }\r\n            } catch (NoClassDefFoundError ignored) {\r\n            \/\/ Not using coroutines.\r\n            }\r\n        }\r\n    }\r\n    return new ServiceMethodAdapterInfo(false, false, method.getGenericReturnType());\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\retrofit\\retrofit-mock\/src\/main\/java\/retrofit2\/mock\/BehaviorDelegate.java"}