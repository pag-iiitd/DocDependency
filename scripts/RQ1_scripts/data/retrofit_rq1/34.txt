{"randomdocline":"Returns the generic supertype for {@code supertype}. For example, given a class {@code","signature":" static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve)","doc":"Returns the generic supertype for {@code supertype}. For example, given a class {@code\r\nIntegerSet}, the result for when supertype is {@code Set.class} is {@code Set<Integer>} and the\r\nresult when the supertype is {@code Collection.class} is {@code Collection<Integer>}.\r\n","source":"{\r\n    if (toResolve == rawType)\r\n        return context;\r\n    \/\/ We skip searching through interfaces if unknown is an interface.\r\n    if (toResolve.isInterface()) {\r\n        Class<?>[] interfaces = rawType.getInterfaces();\r\n        for (int i = 0, length = interfaces.length; i < length; i++) {\r\n            if (interfaces[i] == toResolve) {\r\n                return rawType.getGenericInterfaces()[i];\r\n            } else if (toResolve.isAssignableFrom(interfaces[i])) {\r\n                return getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);\r\n            }\r\n        }\r\n    }\r\n    \/\/ Check our supertypes.\r\n    if (!rawType.isInterface()) {\r\n        while (rawType != Object.class) {\r\n            Class<?> rawSupertype = rawType.getSuperclass();\r\n            if (rawSupertype == toResolve) {\r\n                return rawType.getGenericSuperclass();\r\n            } else if (toResolve.isAssignableFrom(rawSupertype)) {\r\n                return getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);\r\n            }\r\n            rawType = rawSupertype;\r\n        }\r\n    }\r\n    \/\/ We can't resolve this further.\r\n    return toResolve;\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\retrofit\\retrofit\/src\/main\/java\/retrofit2\/Utils.java"}