{"randomdocline":"Returns the raw call, initializing it if necessary. Throws if initializing the raw call throws,","signature":"private okhttp3.Call getRawCall() throws IOException","doc":"Returns the raw call, initializing it if necessary. Throws if initializing the raw call throws,\r\nor has thrown in previous attempts to create it.\r\n","source":"{\r\n    okhttp3.Call call = rawCall;\r\n    if (call != null)\r\n        return call;\r\n    \/\/ Re-throw previous failures if this isn't the first attempt.\r\n    if (creationFailure != null) {\r\n        if (creationFailure instanceof IOException) {\r\n            throw (IOException) creationFailure;\r\n        } else if (creationFailure instanceof RuntimeException) {\r\n            throw (RuntimeException) creationFailure;\r\n        } else {\r\n            throw (Error) creationFailure;\r\n        }\r\n    }\r\n    \/\/ Create and remember either the success or the failure.\r\n    try {\r\n        return rawCall = createRawCall();\r\n    } catch (RuntimeException | Error | IOException e) {\r\n        \/\/ Do not assign a fatal error to creationFailure.\r\n        throwIfFatal(e);\r\n        creationFailure = e;\r\n        throw e;\r\n    }\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\retrofit\\retrofit\/src\/main\/java\/retrofit2\/OkHttpCall.java"}
'e9059804'