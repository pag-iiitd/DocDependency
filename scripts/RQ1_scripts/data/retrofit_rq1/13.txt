{"randomdocline":"      parts specified by the {@link retrofit2.http.Part @Part} parameter annotation.","signature":"public T create(final Class<T> service)","doc":"Create an implementation of the API endpoints defined by the {@code service} interface.\r\n\r\n<p>The relative path for a given method is obtained from an annotation on the method describing\r\nthe request type. The built-in methods are {@link retrofit2.http.GET GET}, {@link\r\nretrofit2.http.PUT PUT}, {@link retrofit2.http.POST POST}, {@link retrofit2.http.PATCH PATCH},\r\n{@link retrofit2.http.HEAD HEAD}, {@link retrofit2.http.DELETE DELETE} and {@link\r\nretrofit2.http.OPTIONS OPTIONS}. You can use a custom HTTP method with {@link HTTP @HTTP}. For\r\na dynamic URL, omit the path on the annotation and annotate the first parameter with {@link\r\nUrl @Url}.\r\n\r\n<p>Method parameters can be used to replace parts of the URL by annotating them with {@link\r\nretrofit2.http.Path @Path}. Replacement sections are denoted by an identifier surrounded by\r\ncurly braces (e.g., \"{foo}\"). To add items to the query string of a URL use {@link\r\nretrofit2.http.Query @Query}.\r\n\r\n<p>The body of a request is denoted by the {@link retrofit2.http.Body @Body} annotation. The\r\nobject will be converted to request representation by one of the {@link Converter.Factory}\r\ninstances. A {@link RequestBody} can also be used for a raw representation.\r\n\r\n<p>Alternative request body formats are supported by method annotations and corresponding\r\nparameter annotations:\r\n\r\n<ul>\r\n  <li>{@link retrofit2.http.FormUrlEncoded @FormUrlEncoded} - Form-encoded data with key-value\r\n      pairs specified by the {@link retrofit2.http.Field @Field} parameter annotation.\r\n  <li>{@link retrofit2.http.Multipart @Multipart} - RFC 2388-compliant multipart data with\r\n      parts specified by the {@link retrofit2.http.Part @Part} parameter annotation.\r\n<\/ul>\r\n\r\n<p>Additional static headers can be added for an endpoint using the {@link\r\nretrofit2.http.Headers @Headers} method annotation. For per-request control over a header\r\nannotate a parameter with {@link Header @Header}.\r\n\r\n<p>By default, methods return a {@link Call} which represents the HTTP request. The generic\r\nparameter of the call is the response body type and will be converted by one of the {@link\r\nConverter.Factory} instances. {@link ResponseBody} can also be used for a raw representation.\r\n{@link Void} can be used if you do not care about the body contents.\r\n\r\n<p>For example:\r\n\r\n<pre>\r\npublic interface CategoryService {\r\n  &#64;POST(\"category\/{cat}\/\")\r\n  Call&lt;List&lt;Item&gt;&gt; categoryList(@Path(\"cat\") String a, @Query(\"page\") int b);\r\n}\r\n<\/pre>\r\n","source":"{\r\n    validateServiceInterface(service);\r\n    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service }, new InvocationHandler() {\r\n\r\n        private final Platform platform = Platform.get();\r\n\r\n        private final Object[] emptyArgs = new Object[0];\r\n\r\n        @Override\r\n        @Nullable\r\n        public Object invoke(Object proxy, Method method, @Nullable Object[] args) throws Throwable {\r\n            \/\/ If the method is a method from Object then defer to normal invocation.\r\n            if (method.getDeclaringClass() == Object.class) {\r\n                return method.invoke(this, args);\r\n            }\r\n            args = args != null ? args : emptyArgs;\r\n            return platform.isDefaultMethod(method) ? platform.invokeDefaultMethod(method, service, proxy, args) : loadServiceMethod(method).invoke(args);\r\n        }\r\n    });\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\retrofit\\retrofit\/src\/main\/java\/retrofit2\/Retrofit.java"}