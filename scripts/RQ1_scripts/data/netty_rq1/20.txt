{"randomdocline":"@return ByteBuf with encoded bytes","signature":" static ByteBuf doEncode(ByteBufAllocator byteBufAllocator, MqttMessage message)","doc":"This is the main encoding method.\r\nIt's only visible for testing.\r\n\r\n@param byteBufAllocator Allocates ByteBuf\r\n@param message MQTT message to encode\r\n@return ByteBuf with encoded bytes\r\n","source":"{\r\n    switch(message.fixedHeader().messageType()) {\r\n        case CONNECT:\r\n            return encodeConnectMessage(byteBufAllocator, (MqttConnectMessage) message);\r\n        case CONNACK:\r\n            return encodeConnAckMessage(byteBufAllocator, (MqttConnAckMessage) message);\r\n        case PUBLISH:\r\n            return encodePublishMessage(byteBufAllocator, (MqttPublishMessage) message);\r\n        case SUBSCRIBE:\r\n            return encodeSubscribeMessage(byteBufAllocator, (MqttSubscribeMessage) message);\r\n        case UNSUBSCRIBE:\r\n            return encodeUnsubscribeMessage(byteBufAllocator, (MqttUnsubscribeMessage) message);\r\n        case SUBACK:\r\n            return encodeSubAckMessage(byteBufAllocator, (MqttSubAckMessage) message);\r\n        case UNSUBACK:\r\n        case PUBACK:\r\n        case PUBREC:\r\n        case PUBREL:\r\n        case PUBCOMP:\r\n            return encodeMessageWithOnlySingleByteFixedHeaderAndMessageId(byteBufAllocator, message);\r\n        case PINGREQ:\r\n        case PINGRESP:\r\n        case DISCONNECT:\r\n            return encodeMessageWithOnlySingleByteFixedHeader(byteBufAllocator, message);\r\n        default:\r\n            throw new IllegalArgumentException(\"Unknown message type: \" + message.fixedHeader().messageType().value());\r\n    }\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\netty\\codec-mqtt\/src\/main\/java\/io\/netty\/handler\/codec\/mqtt\/MqttEncoder.java"}
'1ba5fa4b4b'