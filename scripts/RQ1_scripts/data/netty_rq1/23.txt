{"randomdocline":"Transforms basic string requests to binary memcache requests","signature":"public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)","doc":"Transforms basic string requests to binary memcache requests\r\n","source":"{\r\n    String command = (String) msg;\r\n    if (command.startsWith(\"get \")) {\r\n        String keyString = command.substring(\"get \".length());\r\n        ByteBuf key = Unpooled.wrappedBuffer(keyString.getBytes(CharsetUtil.UTF_8));\r\n        BinaryMemcacheRequest req = new DefaultBinaryMemcacheRequest(key);\r\n        req.setOpcode(BinaryMemcacheOpcodes.GET);\r\n        ctx.write(req, promise);\r\n    } else if (command.startsWith(\"set \")) {\r\n        String[] parts = command.split(\" \", 3);\r\n        if (parts.length < 3) {\r\n            throw new IllegalArgumentException(\"Malformed Command: \" + command);\r\n        }\r\n        String keyString = parts[1];\r\n        String value = parts[2];\r\n        ByteBuf key = Unpooled.wrappedBuffer(keyString.getBytes(CharsetUtil.UTF_8));\r\n        ByteBuf content = Unpooled.wrappedBuffer(value.getBytes(CharsetUtil.UTF_8));\r\n        ByteBuf extras = ctx.alloc().buffer(8);\r\n        extras.writeZero(8);\r\n        BinaryMemcacheRequest req = new DefaultFullBinaryMemcacheRequest(key, extras, content);\r\n        req.setOpcode(BinaryMemcacheOpcodes.SET);\r\n        ctx.write(req, promise);\r\n    } else {\r\n        throw new IllegalStateException(\"Unknown Message: \" + msg);\r\n    }\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\netty\\example\/src\/main\/java\/io\/netty\/example\/memcache\/binary\/MemcacheClientHandler.java"}
'7a6fa73989'