{"randomdocline":"different servlet containers; the only 100% safe way is a session mutex.","signature":"public final void setSynchronizeOnSession(boolean synchronizeOnSession)","doc":"Set if controller execution should be synchronized on the session,\r\nto serialize parallel invocations from the same client.\r\n<p>More specifically, the execution of the {@code handleRequestInternal}\r\nmethod will get synchronized if this flag is \"true\". The best available\r\nsession mutex will be used for the synchronization; ideally, this will\r\nbe a mutex exposed by HttpSessionMutexListener.\r\n<p>The session mutex is guaranteed to be the same object during\r\nthe entire lifetime of the session, available under the key defined\r\nby the {@code SESSION_MUTEX_ATTRIBUTE} constant. It serves as a\r\nsafe reference to synchronize on for locking on the current session.\r\n<p>In many cases, the HttpSession reference itself is a safe mutex\r\nas well, since it will always be the same object reference for the\r\nsame active logical session. However, this is not guaranteed across\r\ndifferent servlet containers; the only 100% safe way is a session mutex.\r\n\r\n@see AbstractController#handleRequestInternal\r\n@see org.springframework.web.util.HttpSessionMutexListener\r\n@see org.springframework.web.util.WebUtils#getSessionMutex(javax.servlet.http.HttpSession)\r\n","source":"{\r\n    this.synchronizeOnSession = synchronizeOnSession;\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\spring-framework\\spring-webmvc\/src\/main\/java\/org\/springframework\/web\/servlet\/mvc\/AbstractController.java"}
'2b3445df81'
'acc75aa4b8'
'4ea298a7b0'
'af47a8b79b'
'04eaa47ec1'