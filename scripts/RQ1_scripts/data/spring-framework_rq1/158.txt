{"randomdocline":"exactly name the class in question and resolvers that name a specific class but it","signature":"public static List<PropertyAccessor> getPropertyAccessorsToTry(@Nullable Class<?> targetType, List<PropertyAccessor> propertyAccessors)","doc":"Determines the set of property resolvers that should be used to try and access a\r\nproperty on the specified target type. The resolvers are considered to be in an\r\nordered list, however in the returned list any that are exact matches for the input\r\ntarget type (as opposed to 'general' resolvers that could work for any type) are\r\nplaced at the start of the list. In addition, there are specific resolvers that\r\nexactly name the class in question and resolvers that name a specific class but it\r\nis a supertype of the class we have. These are put at the end of the specific resolvers\r\nset and will be tried after exactly matching accessors but before generic accessors.\r\n\r\n@param targetType the type upon which property access is being attempted\r\n@return a list of resolvers that should be tried in order to access the property\r\n","source":"{\r\n    List<PropertyAccessor> specificAccessors = new ArrayList<>();\r\n    List<PropertyAccessor> generalAccessors = new ArrayList<>();\r\n    for (PropertyAccessor resolver : propertyAccessors) {\r\n        Class<?>[] targets = resolver.getSpecificTargetClasses();\r\n        if (targets == null) {\r\n            \/\/ generic resolver that says it can be used for any type\r\n            generalAccessors.add(resolver);\r\n        } else {\r\n            if (targetType != null) {\r\n                int pos = 0;\r\n                for (Class<?> clazz : targets) {\r\n                    if (clazz == targetType) {\r\n                        \/\/ put exact matches on the front to be tried first?\r\n                        specificAccessors.add(pos++, resolver);\r\n                    } else if (clazz.isAssignableFrom(targetType)) {\r\n                        \/\/ put supertype matches at the end of the\r\n                        \/\/ specificAccessor list\r\n                        generalAccessors.add(resolver);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    List<PropertyAccessor> resolvers = new ArrayList<>(specificAccessors.size() + generalAccessors.size());\r\n    resolvers.addAll(specificAccessors);\r\n    resolvers.addAll(generalAccessors);\r\n    return resolvers;\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\spring-framework\\spring-expression\/src\/main\/java\/org\/springframework\/expression\/spel\/ast\/AstUtils.java"}
'e83bdda7d5'