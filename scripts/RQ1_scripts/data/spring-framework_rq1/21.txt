{"randomdocline":"<p>Default is \"false\", creating a local {@link ForkJoinPool} instance based on the","signature":"public void setCommonPool(boolean commonPool)","doc":"Set whether to expose JDK 8's 'common' {@link ForkJoinPool}.\r\n<p>Default is \"false\", creating a local {@link ForkJoinPool} instance based on the\r\n{@link #setParallelism \"parallelism\"}, {@link #setThreadFactory \"threadFactory\"},\r\n{@link #setUncaughtExceptionHandler \"uncaughtExceptionHandler\"} and\r\n{@link #setAsyncMode \"asyncMode\"} properties on this FactoryBean.\r\n<p><b>NOTE:<\/b> Setting this flag to \"true\" effectively ignores all other\r\nproperties on this FactoryBean, reusing the shared common JDK {@link ForkJoinPool}\r\ninstead. This is a fine choice on JDK 8 but does remove the application's ability\r\nto customize ForkJoinPool behavior, in particular the use of custom threads.\r\n\r\n@since 3.2\r\n@see java.util.concurrent.ForkJoinPool#commonPool()\r\n","source":"{\r\n    this.commonPool = commonPool;\r\n}","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\spring-framework\\spring-context\/src\/main\/java\/org\/springframework\/scheduling\/concurrent\/ForkJoinPoolFactoryBean.java"}
