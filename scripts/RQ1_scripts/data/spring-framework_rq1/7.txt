{"randomdocline":"<p>A RuntimeException thrown by the callback is treated as application","signature":"protected abstract void doInTransactionWithoutResult(TransactionStatus status)","doc":"Gets called by {@code TransactionTemplate.execute} within a transactional\r\ncontext. Does not need to care about transactions itself, although it can retrieve\r\nand influence the status of the current transaction via the given status object,\r\ne.g. setting rollback-only.\r\n<p>A RuntimeException thrown by the callback is treated as application\r\nexception that enforces a rollback. An exception gets propagated to the\r\ncaller of the template.\r\n<p>Note when using JTA: JTA transactions only work with transactional\r\nJNDI resources, so implementations need to use such resources if they\r\nwant transaction support.\r\n\r\n@param status associated transaction status\r\n@see TransactionTemplate#execute\r\n","source":"","pathname":"D:\\Documents\\PA_Research\\DocModularity_Study\\spring-framework\\spring-tx\/src\/main\/java\/org\/springframework\/transaction\/support\/TransactionCallbackWithoutResult.java"}
'846b848fd3'